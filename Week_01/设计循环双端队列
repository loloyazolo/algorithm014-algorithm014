class MyCircularDeque {

    int[] data;
	int head;
	int tail;

	/** Initialize your data structure here. Set the size of the deque to be k. */
	public MyCircularDeque(int k) {
		data = new int[k];
		head = -1;
		tail = -1;
	}

	/** Adds an item at the front of Deque. Return true if the operation is successful. */
	public boolean insertFront(int value) {
		if (isEmpty()) {
			head = tail = 0;
			data[tail] = value;
			return true;
		}
		if (isFull()) {
			return false;
		}
		head = (head + data.length + data.length - 1) % data.length;
		data[head] = value;
		return true;
	}

	/** Adds an item at the rear of Deque. Return true if the operation is successful. */
	public boolean insertLast(int value) {
		if (isEmpty()) {
			head = tail = 0;
			data[tail] = value;
			return true;
		}
		if (isFull()) {
			return false;
		}
		tail = (tail + 1) % data.length;
		data[tail] = value;
		return true;
	}

	/** Deletes an item from the front of Deque. Return true if the operation is successful. */
	public boolean deleteFront() {
		if (isEmpty()) {
			return false;
		}
		if (head == tail) {
			head = -1;
			tail = -1;
			return true;
		}
		head = (head + 1) % data.length;
		return true;
	}

	/** Deletes an item from the rear of Deque. Return true if the operation is successful. */
	public boolean deleteLast() {
		if (isEmpty()) {
			return false;
		}
		if (head == tail) {
			head = -1;
			tail = -1;
			return true;
		}
		tail = (tail + data.length + data.length - 1) % data.length;
		return true;
	}

	/** Get the front item from the deque. */
	public int getFront() {
		if (isEmpty()) {
			return -1;
		}
		return data[head];
	}

	/** Get the last item from the deque. */
	public int getRear() {
		if (isEmpty()) {
			return -1;
		}
		return data[tail];
	}

	/** Checks whether the circular deque is empty or not. */
	public boolean isEmpty() {
		return head == -1;

	}

	/** Checks whether the circular deque is full or not. */
	public boolean isFull() {
		if (tail - head == data.length - 1 || head - tail == 1) {
			return true;
		}
		return false;
	}
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */
